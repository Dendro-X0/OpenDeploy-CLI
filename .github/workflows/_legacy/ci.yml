name: CI

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    concurrency:
      group: ci-${{ github.ref }}
      cancel-in-progress: true
    env:
      CI: '1'
      FORCE_COLOR: '0'
      OPD_SCHEMA_STRICT: '1'
      OPD_TEST_NO_SPAWN: '1'
      OPD_FORCE_CI: '1'
      TZ: 'UTC'
      LC_ALL: 'C'
    steps:
      - uses: actions/checkout@v4
      - name: Enable Corepack & setup pnpm
        run: |
          corepack enable
          corepack prepare pnpm@10.13.1 --activate
      - name: Debug versions
        run: |
          node -v
          pnpm -v
      - name: Approve native build scripts
        run: pnpm approve-builds @tailwindcss/oxide esbuild sharp workerd
      - name: Install deps
        run: pnpm install --no-frozen-lockfile
      - name: Typecheck (if present)
        run: pnpm -r --if-present typecheck
      - name: Build
        run: pnpm build
      - name: Test (CLI)
        run: |
          mkdir -p ./.artifacts
          OPD_TEST_NO_SPAWN=1 OPD_TEST_FORCE_SAFE_FIXES=1 pnpm -C packages/cli test -- \
            --reporter=dot \
            --reporter=json --outputFile ../../.artifacts/vitest.json \
            --exclude src/__tests__/start-safe-fixes.test.ts \
            --exclude src/__tests__/start-next-config-fixes.test.ts
      - name: Capture CI environment snapshot
        run: node packages/cli/dist/index.js doctor env-snapshot --out ./.artifacts/ci.snapshot.json
      - name: Upload artifacts (JSON/NDJSON)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: opd-artifacts-ci
          path: |
            ./.artifacts/**/*.json
            ./.artifacts/**/*.ndjson
          if-no-files-found: ignore
      - name: Upload Vitest JSON report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vitest-report-ci
          path: ./.artifacts/vitest.json
          if-no-files-found: ignore
      # Docs link check disabled until monorepo script is ported
      # - name: Docs link check
      #   run: pnpm run ci:docs-links

  security-scan:
    name: Security - OpenDeploy Scan (strict)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Enable Corepack & setup pnpm
        run: |
          corepack enable
          corepack prepare pnpm@10.13.1 --activate
      - name: Install deps
        run: pnpm install --no-frozen-lockfile
      - name: Build CLI
        run: pnpm -C packages/cli build
      - name: Doctor (strict)
        env:
          OPD_FORCE_CI: '1'
        run: node packages/cli/dist/index.js doctor --json --ci --strict
      - name: Run OpenDeploy scan (strict)
        env:
          OPD_FORCE_CI: '1'
        run: node packages/cli/dist/index.js scan --json --strict

  security-content:
    name: Security - Content Guard (code + cache + netlify artifacts)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Compute diff range
        id: diff
        shell: bash
        run: |
          set -euo pipefail
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            base_ref="${{ github.base_ref }}"
            git fetch origin "$base_ref" --depth=1
            echo "range=origin/$base_ref...HEAD" >> "$GITHUB_OUTPUT"
          else
            echo "range=${{ github.event.before }}...${{ github.sha }}" >> "$GITHUB_OUTPUT"
          fi
      - name: List changed files
        shell: bash
        run: |
          set -euo pipefail
          git diff --name-only "${{ steps.diff.outputs.range }}" > changed.txt || true
          echo "Changed files:"; cat changed.txt || true
      - name: Filter to source files (exclude docs/markdown/etc.)
        id: filter
        shell: bash
        run: |
          set -euo pipefail
          grep -Ev '^(apps/)?docs/|^docs/|\.md$|^\.github/|^LICENSE$|^CHANGELOG\.md$' changed.txt > filtered.txt || true
          echo "Filtered files:"; cat filtered.txt || true
      - name: Grep for forbidden tokens in source
        shell: bash
        run: |
          set -euo pipefail
          if [[ ! -s filtered.txt ]]; then
            echo "No filtered files to scan"; exit 0
          fi
          p1='(^|[^A-Za-z0-9_])netlify\s+(deploy|link|login|status|api)\b'
          p2='\\.opendeploy/cache\\.json'
          p3='OpenDeploy/cache\\.json'
          bad=0
          while IFS= read -r f; do
            [[ -f "$f" ]] || continue
            if grep -Eni -e "$p1" -e "$p2" -e "$p3" -- "$f"; then
              echo "::error file=$f::Forbidden token matched."; bad=1
            fi
          done < filtered.txt
          if [[ $bad -ne 0 ]]; then
            echo "::error::Content guard failed. Remove Netlify operational usage and any project-local cache paths."; exit 1
          fi
          echo "Content guard passed."
      - name: Secret/Cache file guard in changes
        shell: bash
        run: |
          set -euo pipefail
          deny_re='(^|/)\.opendeploy(/|$)|(^|/)OpenDeploy(/|$)'
          deny_files_re='(^|/)\.opendeploy/cache\.json$'
          if grep -Ei "$deny_re|$deny_files_re" changed.txt; then
            echo "::error::Blocked: .opendeploy/ or OpenDeploy/ files detected in changes (or cache.json within)."; exit 1
          else
            echo "No forbidden cache files in change set."
          fi
      - name: Netlify artifacts guard (paths)
        shell: bash
        run: |
          set -euo pipefail
          FAIL=0
          check_exists() { if [ -e "$1" ]; then echo "Found forbidden path: $1" >&2; FAIL=1; fi }
          check_exists packages/cli/docs/providers/netlify.md || true
          check_exists packages/cli/schemas/examples/start.netlify.json || true
          check_exists packages/cli/schemas/examples/up.netlify.json || true
          check_exists packages/cli/scripts/smoke/netlify-direct.sh || true
          check_exists packages/cli/scripts/smoke/netlify-direct.ps1 || true
          check_exists .netlify || true
          if [ "$FAIL" -ne 0 ]; then echo "Guard failed. Remove Netlify artifacts." >&2; exit 1; fi

  security-gitleaks:
    name: Security - Gitleaks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          args: --redact --config-path .gitleaks.toml --report-path ./.artifacts/gitleaks.sarif --report-format sarif
      - name: Upload Gitleaks report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: ./.artifacts/gitleaks.sarif
          if-no-files-found: ignore

  docs-link-check:
    name: Docs Link Check (non-blocking)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Run docs link/anchor checker
        continue-on-error: true
        run: node scripts/docs-link-check.mjs

  provider-smoke:
    name: Provider Smoke â€” detect + doctor (virtual)
    runs-on: ubuntu-latest
    env:
      OPD_FORCE_CI: '1'
      OPD_PROVIDER_MODE: 'virtual'
      OPD_NDJSON: '1'
    strategy:
      fail-fast: false
      matrix:
        provider: [ vercel, cloudflare, github ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
      - name: Install deps
        run: pnpm install --no-frozen-lockfile
      - name: Build CLI
        run: pnpm -C packages/cli build
      - name: Create tiny example app
        shell: bash
        run: |
          set -euo pipefail
          ROOT=$(pwd)
          case "${{ matrix.provider }}" in
            vercel)
              APP="$ROOT/example-vercel"; mkdir -p "$APP"; cat > "$APP/next.config.js" <<'EOF'
              module.exports = { reactStrictMode: true }
              EOF
              ;;
            cloudflare)
              APP="$ROOT/example-cloudflare"; mkdir -p "$APP"; cat > "$APP/next.config.js" <<'EOF'
              module.exports = { reactStrictMode: true }
              EOF
              cat > "$APP/wrangler.toml" <<'EOF'
              name = "example-next-on-pages"
              compatibility_date = "2024-01-01"
              EOF
              ;;
            github)
              APP="$ROOT/example-github"; mkdir -p "$APP"; cat > "$APP/next.config.js" <<'EOF'
              module.exports = { output: 'export' }
              EOF
              mkdir -p "$APP/public"; echo "hello" > "$APP/public/.nojekyll"
              ;;
          esac
          echo "APP_DIR=$APP" >> $GITHUB_ENV
          mkdir -p ./.artifacts
      - name: Detect (JSON)
        run: node packages/cli/dist/index.js detect --json --path "$APP_DIR" | tee ./.artifacts/detect-${{ matrix.provider }}.json
      - name: Doctor (JSON, non-strict)
        run: node packages/cli/dist/index.js doctor --json --path "$APP_DIR" | tee ./.artifacts/doctor-${{ matrix.provider }}.json
      - name: Upload provider smoke artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: provider-smoke-${{ matrix.provider }}
          path: ./.artifacts/**/*.json
          if-no-files-found: ignore
