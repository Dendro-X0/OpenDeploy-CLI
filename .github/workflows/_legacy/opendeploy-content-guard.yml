name: Security - OpenDeploy Content Guard (manual)

on:
  workflow_dispatch: {}

jobs:
  content-guard:
    name: Grep for forbidden provider/cache patterns (outside docs)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Compute diff range
        id: diff
        shell: bash
        run: |
          set -euo pipefail
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            base_ref="${{ github.base_ref }}"
            git fetch origin "$base_ref" --depth=1 || true
            echo "range=origin/$base_ref...HEAD" >> "$GITHUB_OUTPUT"
          elif [[ "${{ github.event_name }}" == "push" && -n "${{ github.event.before }}" ]]; then
            echo "range=${{ github.event.before }}...${{ github.sha }}" >> "$GITHUB_OUTPUT"
          else
            # Manual or unknown context: compare last commit to HEAD
            A=$(git rev-parse HEAD^ 2>/dev/null || echo '')
            B=$(git rev-parse HEAD 2>/dev/null || echo '')
            if [[ -n "$A" && -n "$B" ]]; then
              echo "range=$A...$B" >> "$GITHUB_OUTPUT"
            else
              echo "range=HEAD" >> "$GITHUB_OUTPUT"
            fi
          fi

      - name: List changed files
        shell: bash
        run: |
          set -euo pipefail
          git diff --name-only "${{ steps.diff.outputs.range }}" > changed.txt || true
          echo "Changed files:"; cat changed.txt || true

      - name: Filter to source files (exclude docs/markdown/etc.)
        id: filter
        shell: bash
        run: |
          set -euo pipefail
          # Exclude docs and markdown and common non-source paths
          grep -Ev '^(apps/)?docs/|^docs/|\.md$|^\.github/|^LICENSE$|^CHANGELOG\.md$' changed.txt > filtered.txt || true
          echo "Filtered files:"; cat filtered.txt || true

      - name: Grep for forbidden tokens
        shell: bash
        run: |
          set -euo pipefail
          if [[ ! -s filtered.txt ]]; then
            echo "No filtered files to scan"; exit 0
          fi

          # Forbidden content patterns (case-insensitive):
          # - Netlify operational CLI usage in code
          # - Project-local cache file paths
          p1='(^|[^A-Za-z0-9_])netlify\s+(deploy|link|login|status|api)\b'
          p2='\\.opendeploy/cache\\.json'
          p3='OpenDeploy/cache\\.json'

          bad=0
          while IFS= read -r f; do
            # Skip deleted files (may appear in PR diffs)
            [[ -f "$f" ]] || continue
            if grep -Eni -e "$p1" -e "$p2" -e "$p3" -- "$f"; then
              echo "::error file=$f::Forbidden token matched."
              bad=1
            fi
          done < filtered.txt

          if [[ $bad -ne 0 ]]; then
            echo "::error::Content guard failed. Remove Netlify operational usage and any project-local cache paths."
            exit 1
          fi
          echo "Content guard passed."
