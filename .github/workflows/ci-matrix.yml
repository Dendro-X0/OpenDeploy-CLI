name: CI Matrix

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-test:
    name: Build and Test (Node ${{ matrix.node }} / ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    concurrency:
      group: ci-matrix-${{ github.ref }}
      cancel-in-progress: true
    env:
      CI: '1'
      FORCE_COLOR: '0'
      OPD_SCHEMA_STRICT: '1'
      OPD_TEST_NO_SPAWN: '1'
      OPD_PROVIDER_MODE: 'virtual'
      OPD_FORCE_CI: '1'
      TZ: 'UTC'
      LC_ALL: 'C'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-2022]
        node: [18.x, 20.x, 22.x]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
      - name: Enable corepack & setup pnpm
        run: |
          corepack enable
          corepack prepare pnpm@10.13.1 --activate
      - name: Approve native build scripts
        run: pnpm approve-builds @tailwindcss/oxide esbuild sharp workerd
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Bootstrap prebuilt opd-go (Linux)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        continue-on-error: true
        run: |
          set -euxo pipefail
          OWNER_REPO="${GITHUB_REPOSITORY}"
          API="https://api.github.com/repos/${OWNER_REPO}/releases/latest"
          OS="linux"
          ARCH=$(uname -m)
          case "$ARCH" in
            x86_64) ARCH=amd64 ;;
            aarch64) ARCH=arm64 ;;
            *) ARCH=amd64 ;;
          esac
          mkdir -p .bin
          JSON=$(curl -sSL "$API" || true)
          echo "$JSON" | grep -q 'opd-go_' || { echo 'No release assets yet'; exit 0; }
          URL=$(echo "$JSON" | jq -r ".assets[] | select(.name | test(\"opd-go_.*_${OS}_${ARCH}\\\\.tar\\\\.gz\")) | .browser_download_url" | head -n1)
          if [ -z "$URL" ] || [ "$URL" = "null" ]; then echo 'No matching asset'; exit 0; fi
          curl -sSL "$URL" -o /tmp/opd-go.tar.gz
          tar -xzf /tmp/opd-go.tar.gz -C .bin
          if [ -f .bin/opd-go ]; then echo "OPD_GO_BIN=$PWD/.bin/opd-go" >> "$GITHUB_ENV"; chmod +x .bin/opd-go; fi
      - name: Bootstrap prebuilt opd-go (Windows)
        if: matrix.os == 'windows-2022'
        shell: pwsh
        continue-on-error: true
        run: |
          $ErrorActionPreference = 'Stop'
          $ownerRepo = "$env:GITHUB_REPOSITORY"
          $api = "https://api.github.com/repos/$ownerRepo/releases/latest"
          $os = 'windows'
          $archRaw = (Get-CimInstance Win32_Processor).Architecture
          $arch = if ($archRaw -eq 12) { 'arm64' } else { 'amd64' }
          New-Item -ItemType Directory -Force -Path .\.bin | Out-Null
          try { $json = Invoke-RestMethod -UseBasicParsing -Uri $api } catch { Write-Host 'No release assets yet'; exit 0 }
          $asset = $json.assets | Where-Object { $_.name -match "opd-go_.*_${os}_${arch}\.zip" } | Select-Object -First 1
          if (-not $asset) { Write-Host 'No matching asset'; exit 0 }
          $zip = Join-Path $env:TEMP 'opd-go.zip'
          Invoke-WebRequest -Uri $asset.browser_download_url -OutFile $zip
          Expand-Archive -Path $zip -DestinationPath .\.bin -Force
          $bin = Join-Path $PWD '.bin/opd-go.exe'
          if (Test-Path $bin) { Add-Content -Path $env:GITHUB_ENV -Value "OPD_GO_BIN=$bin" }
      - name: Build
        run: pnpm build
      - name: Run unit tests
        run: pnpm test -- --reporter=dot
      - name: Exit code consistency checks
        run: pnpm run ci:exit-codes
      - name: Validate JSON schemas against examples
        run: pnpm run ci:validate-schemas
      - name: Capture real outputs and validate against schemas
        run: pnpm run ci:capture-validate
      - name: Capture CI environment snapshot
        run: node packages/cli/dist/index.js doctor env-snapshot --out ./.artifacts/ci.snapshot.json
      # - name: Docs link check
      #   run: pnpm run ci:docs-links
      - name: Upload JSON/NDJSON artifacts (if present)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: opd-artifacts-${{ matrix.os }}-${{ matrix.node }}
          path: |
            ./.artifacts/**/*.json
            ./.artifacts/**/*.ndjson
          if-no-files-found: ignore
